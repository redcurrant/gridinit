[Default]
listen=/var/run/gridinit.sock
pidfile=/var/run/gridinit.pid

# Default:uid : STRING | INTEGER
# The default user ID to be applied to services. You can use even
# a logical name or its ID. 
uid=root

# Default:gid : STRING | INTEGER
# The default group ID to be applied to services. You can use even
# a logical name or its ID. 
gid=root

# Default:include : PATTERN
# Globs (see 'man glob') this pattern and loads all the files found
# as configuration files. Only 'Service.*' sections will be considered
# in these files.
# No default value.
include=/GRID/*/conf/gridinit.conf.d/*

# Default:0
# Set this to a non-zero to inherit the environement from the gridinit.
# This value is used for each service loaded.
inherit_env=0

# Default:env.STRING : STRING
# Here you can populate the environement of the service.
env.PATH=/bin:/usr/bin:/usr/local/bin
env.LD_LIBRARY_PATH=/lib:/usr/lib

# Default:limit.core_size : INTEGER
# Default maximal core-dump file size in megabytes. See 'man ulimit' for
# more information. Set 0 for no core files, a negative integer for no limit,
# or a positive integer to set a limit.
# Default value : -1
limit.core_size=-1

# Default:limit.max_files : INTEGER
# Default maximal number fo file descriptors that can be opened
# simultaneously in the services.
# Default value : 8192
limit.max_files=8192

# Default:limit.stack_size : INTEGER
# Default maximal thread stack size in kilobytes for each 
# Default value : 1024
limit.stack_size=1024

# Default:groups_only : STRING[,STRING]...
# Set this variable if you want to filter the services. Only those
# matching one of the given groups will be considered by CLI
# start/stop commands
groups_only=NS-common,NS-stgdev

[Alerts]
plugin=/usr/local/lib/gridinit/gridinit_alert_implementation.so
symbol=MODULE_EXPORT
config.sopcode=XXX-YYY-NNNN
config.code_client=B2B
config.code_projet=OIO-SDS

[service.key0]

# group : STRING
# Optional configuration directive setting an arbitrary tag on the
# service. This tag allows start/stop CLI commands to work on the current
# service when an argument with the form '@STRING' is present and STRING
# matches the current service's group. 
group=NS0

# command : STRING
# Mandatory Directive
command=gridinit_testcmd /tmp/key0.out 5

# enabled : BOOL
# Optional directive telling if the service is allowed to start.
# A disabled service cannot be started even if start CLI commands
# are sent.
enabled=true

# on_die : 'cry' | 'respawn' | 'exit'
# Optional and dangerous directive telling what to do with the whole
# gridinit when the current service dies, whatever the normality of
# the death.
on_die=respawn

# env.STRING : STRING
# 
env.PATH=/bin:/usr/bin:/usr/local/bin:/home/a127803/INSTALL/bin
env.LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/home/a127803/INSTALL/lib

# uid : STRING | INTEGER
# Ignored if the gridinit uid is not 0
uid=root

# gid : STRING | INTEGER
# Ignored if the gridinit uid is not 0
gid=root

# start_at_boot : BOOL
# Optional, default: true
# Tells if the service has to be started when it is met for the first
# time (i.e. not changed if the service is refreshed after a configuration
# reload). 'start_at_boot' is overriden by 'enable' or CLI 'start' and
# 'stop' commands.
start_at_boot=true

